#! /usr/bin/env bash

function bandcamp_help {
    cat << _HELP_

  “bandcamp” – Clean music downloads.

  Usage: $(printf '%q' "$(basename "$0")") [OPTION]... [ZIP]...

  For every ZIP file in the download directory or given as argument:
    1. take the content,
    2. Optional: convert it to MP3 if it is a FLAC record,
    3. find a cover if there are none,
    4. apply the cover to the files, and
    5. store all this in the music directory.

  Note that since all you need are ZIPs containing MP3 or FLAC files,
  this can work for lots of downloads (e.g., Amazon Music),
  even though I initially wrote this for Bandcamp purchases.

  Options:

    -c  Activate FLAC → MP3 conversion for this run, regardless of
        the value of CONVERT_TO_MP3 in the configuration file.

    -d  Activate debug logs for this run, regardless of the
        value of PRINT_DEBUG in the configuration file.

    -h  Display this help.

  https://github.com/alice-mm/bandcampetc
  http://www.alicem.net/

_HELP_
}


# Get the name of the directory the current script sits in.
readonly SCR_DIR=$(
    dirname "$(readlink -f -- "$0")"
)

# shellcheck source=../config/bandcamp.sh
. "$SCR_DIR"/../config/bandcamp.sh || exit


OPTIND=1
while getopts 'cdh' opt
do
    case "$opt" in
        d)  PRINT_DEBUG=1;;
        c)  CONVERT_TO_MP3=1;;
        
        h)
            bandcamp_help
            exit 0
            ;;
        
        *)
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


readonly PRINT_DEBUG CONVERT_TO_MP3

readonly MMETA=${SCR_DIR}/mmeta
readonly COVERS=${SCR_DIR}/covers
readonly LQCOVER=${SCR_DIR}/create-lq-cover
readonly SETCOVER=${SCR_DIR}/setcover
readonly CAPITASONG=${SCR_DIR}/capitasong
readonly RENAME=${SCR_DIR}/to_acceptable_name

# Check if everything is set.
# Quotes thrown in the mix to avoid DoS via globbing.
: "${EDITOR:?} ${MMETA:?} ${COVERS:?} ${LQCOVER:?}"
: "${SETCOVER:?} ${CAPITASONG:?} ${RENAME:?} ${CONV:?}"
: "${MMETA_PLACEHOLDER:?} ${COVER_LQ_BASENAME:?}"
: "${CONVERTED_MP3_RATE:?}"

# Formatting, with overkill stuff
# for platforms that do not support this.
readonly TBOLD=$(tput -T"${TERM:-xterm}" bold 2> /dev/null)
readonly TYEL=$(tput -T"${TERM:-xterm}" setaf 3 2> /dev/null)
readonly TRED=$(tput -T"${TERM:-xterm}" setaf 1 2> /dev/null)
readonly TNORM=$(tput -T"${TERM:-xterm}" sgr0 2> /dev/null)


# shellcheck source=../lib/bandcamp_functions.sh
. "$SCR_DIR"/../lib/bandcamp_functions.sh || exit


# Let's check if every needed command is available.
unset -v DEPS
DEPS=(
    "$MMETA"
    "$COVERS"
    "$SETCOVER"
    "$CAPITASONG"
    
    "${EDITOR[0]}"
    
    eyeD3
    metaflac
    rsync
    unzip
    identify
    convert
    awk
    file
)

# Optional dependency.
if [ "$CONVERT_TO_MP3" ]
then
    DEPS+=(
        "$CONV"
    )
fi

readonly DEPS

unset -v at_least_one_missing
for cmd in "${DEPS[@]}"
do
    if ! type -p "$cmd" &> /dev/null
    then
        err 'Dependency “%s” not found or not executable.' "$cmd"
        at_least_one_missing=1
    fi
done

# Exit if some program is missing.
if [ "$at_least_one_missing" ]
then
    exit 2
fi


# Grmbl, eyeD3 keeps breaking backwards compatibility
# and their changelog is not *that* informative.
unset -v EYED3_ENCODING_OPT
if eyeD3 --help 2> /dev/null | grep -q -- '--set-encoding[= \t]'
then
    readonly EYED3_ENCODING_OPT=('--set-encoding=utf8')
else
    readonly EYED3_ENCODING_OPT=('--encoding' utf8)
fi
debug 'EYED3_ENCODING_OPT=(%s )' "$(
    printf ' %q' "${EYED3_ENCODING_OPT[@]}"
)"

# I’m not sure that option was there when I started.
if eyeD3 --help 2> /dev/null | grep -q -- '--album-artist[= \t]'
then
    readonly EYED3_ALBUMARTIST_SUPPORT=1
else
    readonly EYED3_ALBUMARTIST_SUPPORT=''
fi
debug 'EYED3_ALBUMARTIST_SUPPORT=%q' "$EYED3_ALBUMARTIST_SUPPORT"


readonly DIR_TEMP=$(
    mktemp -d "${TMPDIR:-/tmp}"/bandcamp-XXXXXXXX
)
if ! [ -d "$DIR_TEMP" ]
then
    echo "$(basename "$0"): Issue with temp directory?" >&2
    exit 3
fi

readonly METAFILE=${DIR_TEMP}/bandcamp_metafile.txt


# Reset IFS.
IFS=$' \t\n'


cd "$DIR_TEMP" || exit

for archive in ~/{Téléchargements,Downloads,Descargas,Transferências,Загрузки,İndirilenler,téléchargements,downloads,descargas,transferências,загрузки}/*.{zip,ZIP} "$@"
do
    # Skip unmatched patterns and unreadable files.
    if [ ! -r "$archive" ]
    then
        continue
    fi
    
    # Normalize, and avoid getting mime types
    # like “inode/symlink” at the ZIP test.
    archive=$(readlink -f -- "$archive")
    
    log 'Inspecting “%s”...' "$archive"
    
    # Is it a valid ZIP? Note that empty ones might fail the test, as
    # they count as “application/octet-stream”, but of course there
    # is no music in empty archives, so /shrug.
    if [ "$(file -b --mime-type "$archive")" != application/zip ]
    then
        log 'Not a valid ZIP? Skipping.'
        continue
    fi
    
    # Is there music in the ZIP?
    if ! mp3_or_flac_in_zip "$archive"
    then
        log 'No MP3 or FLAC here. Skipping.'
        continue
    fi
    
    # Clean temp dir.
    rm -fr -- "${DIR_TEMP:?}"/*
    # Put the archive in it.
    cp -- "$archive" "${DIR_TEMP:?}"/ || continue
    
    if ! process_one_music_zip "$archive"
    then
        err 'Could not handle this archive. Skipping.'
    fi
    
    echo
done

log 'End.'

exit 0
